---
title: "Week-3 Tidy Data Practice"
format: html
editor: visual
---
## Pivot Practice

```{r}
library(tidyverse)
```


```{r}
x <- tibble(
  state = rep(c("MT", "NC" , "SC"),2),
  group = c(rep("C", 3), rep("D", 3)),
  obs = c(1:6)
  )

x
```

Pivot these data so that the data are wide. i.e. Each state should be it’s own unique observation (row). Save this new data set as y.

```{r}
y <- x |> #and then 
  pivot_wider(names_from = group,
                 values_from = obs)
y
```

Now, add "group" to the C and D columns in their name. Hint: Look up the help file for pivot_wider.

```{r}
y
y

```


Now, let’s change it back. Introducing pivot_longer. 

```{r}


```

## Wrangling Flights

To demonstrate data wrangling we will use `flights`, a tibble in the **nycflights13** R package. It includes characteristics of all flights departing from New York City (JFK, LGA, EWR) in 2013.

**Note: As we go through the AE, practicing thinking in steps, and reading your code as sentences**

```{r}
#| label: load-packages
#| message: false
#| warning: false

library(tidyverse)
library(nycflights13)
```

**Write a sentence here that explains how many rows and columns are in the data set using in-line code**

As a reminder, we can use the `names()` function to get a quick reminder on the names of the variables in our data set. We typically do not include this type of code in our professional document.

```{r}

```

# Tibble vs. data frame

A **tibble** is an opinionated version of the `R` data frame. In other words, all tibbles are data frames, but not all data frames are tibbles!

There are many differences between a tibble and a data frame. The main one is...

When you print a tibble, the first ten rows and all of the columns that fit on the screen will display, along with the type of each column.

Other differences include: 

-- it never changes the type of the inputs (e.g. it never converts strings to factors!)

-- it never changes the names of variables 

-- it never creates row names

-- it can have column names that are not valid R variable names

You can read more about the difference here: [Tibble Reading](https://r4ds.had.co.nz/tibbles.html)

Let's look at the differences in the output when we type `flights` (tibble) in the console versus typing `mtcars` (data frame) in the console.

Then, use `as_tibble()` on the `mtcars` data set. Save this new data set as `mtcars_tibble`. Check your environment to see if it worked!

```{r}


```

# Data wrangling with `dplyr`

**dplyr** is the primary package in the tidyverse for data wrangling. [Click here](https://dplyr.tidyverse.org/) for the dplyr reference page. [Click here](https://raw.githubusercontent.com/rstudio/cheatsheets/main/data-transformation.pdf)to download the dplyr cheat sheet.

Quick summary of key dplyr functions[^1]:

[^1]: From [dplyr vignette](https://dplyr.tidyverse.org/articles/dplyr.html)

**Rows:**

-   `filter()`:chooses rows based on column values.
-   `slice()`: chooses rows based on location.
-   `arrange()`: changes the order of the rows
-   `sample_n()`: take a random subset of the rows

**Columns:**

-   `select()`: changes whether or not a column is included.
-   `rename()`: changes the name of columns.
-   `mutate()`: changes the values of columns and creates new columns.

**Groups of rows:**

-   `summarise()`: collapses a group into a single row.
-   `count()`: count unique values of one or more variables.
-   `group_by()`: perform calculations separately for each value of a variable

# Activities

## `select()`

-   Demo: Make a data frame that only contains the variables `dep_delay` and `arr_delay`.

```{r}


```

-   Demo: Make a data frame that keeps every variable except `dep_delay`. Call the new data frame `new.data`

```{r}


```

-   Think about the tibble creation above when we typed `1:5`. We can use this idea as a tool to subset data! Instead of numbers, let's do this with names.

-   Demo: Make a data frame that includes all variables between `year` through `dep_delay` (inclusive). These are all variables that provide information about the departure of each flight.

```{r}


```

-   Demo: Use `select` and `contains()` to make a data frame that includes the variables associated with the arrival, i.e., contains the string `"arr_"` in the name. Reminder: Thinking about code as **sentences** can help make nesting functions more intuitive. 

Note: There should not be a backslash after `arr`. Quarto puts a backslash (sometimes) to indicate that the underscore is just text.

```{r}


```


-   Why is arr_ in quotes? 



## `slice()`

-   Demo: Display the first five rows of the `flights` data frame.

```{r}


```

-   Demo: Display the last two rows of the `flights` data frame. Hint: `n()` produces the number of the last row in the data set. 

Solves this problem with `n()`. Solve this problem with `slice_tail()`.

```{r}


```

## `arrange()`

-   Demo: Arrange the `flights` data set using the `arrange()` function, by `dep_delay`. How are the data ordered? 


```{r}


```

-   Demo: Now let's arrange the data by descending departure delay, so the flights with the **longest** departure delays will be at the top. Hint, run `?desc` in the console. 

```{r}


```

-   **Your turn:** Create a data frame that only includes the plane tail number (`tailnum`), carrier (`carrier`), and departure delay for the flight with the longest departure delay. What is the plane tail number (`tailnum`) for this flight?

```{r}


```

## `filter()`

-   Demo: Filter the data frame by selecting the rows where the destination airport is RDU. Comment the code below.

```{r}


```

Now, run the following code with one equals sign instead of two. Does it still work?

Explanation:


-   Demo: We can also filter using more than one condition. Here we select all rows where the destination airport is RDU and the arrival delay is less than 0. As we've learned, conditions within functions are separated by a `,`.

```{r}


```

We can do more complex tasks using logical operators:

| operator      | definition                   |
|:--------------|:-----------------------------|
| `<`           | is less than?                |
| `<=`          | is less than or equal to?    |
| `>`           | is greater than?             |
| `>=`          | is greater than or equal to? |
| `==`          | is exactly equal to?         |
| `!=`          | is not equal to?             |
| `x & y`       | is x AND y?                  |
| `x | y`       | is x OR y?                   |
| `is.na(x)`    | is x NA?                     |
| `!is.na(x)`   | is x not NA?                 |
| `x %in% y`    | is x in y?                   |
| `!(x %in% y)` | is x not in y?               |
| `!x`          | is not x?                    |

The final operator only makes sense if `x` is logical (TRUE / FALSE).


-   What if we want to look at destinations of RDU and GSO that have no arrival delay or departure delay? Write the code below to do this...

```{r}


```



Can you articulate your code?

Why `c`? 

What happens if we change %in% to == ? 

## `count()`

-   Demo: Create a frequency table of the destination (`dest`) locations for flights from New York.

```{r}


```

-   Demo: In which month was there the fewest number of flights? How many flights were there in that month? Hint: Type `?min` into the console and use the `filter()` function!

```{r}


```


## `mutate()`

Use `mutate()` to create a new variable.

-   Demo: In the code chunk below, `air_time` (minutes in the air) is converted to hours, and then new variable `mph` is created, corresponding to the miles per hour of the flight. Comment each line of code below.

```{r}
data_flights <- flights |> 
  mutate(hours = air_time / 60, 
         mph = distance / hours) |> 
  select(air_time, distance, hours, mph) 
```

-   **Your turn:** Create a new variable to calculate the percentage of flights in each month. What percentage of flights take place in July?

```{r}


```


## `group_by()` + `summarise()` review

`summarize()` collapses the rows into summary statistics and removes columns irrelevant to the calculation.

`group_by()` is used for grouped operations. It's very powerful when paired with `summarise()` to calculate summary statistics by group.

Find the mean and standard deviation of departure delay for each month.

```{r}

  
```